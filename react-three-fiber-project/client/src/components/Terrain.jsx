/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/terrain.glb
*/

import React, { useContext, useRef, useState } from 'react';
import { useGLTF } from '@react-three/drei';
import { useFrame } from "@react-three/fiber";

import {GenContext} from '../context/GenContext';

export function Terrain(props) {
  const { nodes, materials } = useGLTF('./models/terrain.glb');

  const { gendata, dis } = useContext(GenContext);
  const [display, setDisplay] = dis;

  let bladeSpeed = gendata.wind.v <= gendata.wind.minWind ? 0 : gendata.wind.v - gendata.wind.minWind;
  
  const blade0 = useRef();
  const blade1 = useRef();
  const blade2 = useRef();
  const grass = useRef();

  const [active, setActive] = useState([false, false, false, false, false, false]);
  const [hover, setHover] = useState([false, false, false, false, false, false]);
  const [eobj, setEobj] = useState({});

  useFrame((_state, delta) => {
    blade0.current.rotation.z += delta * bladeSpeed;
    blade1.current.rotation.z += delta * bladeSpeed;
    blade2.current.rotation.z += delta * bladeSpeed;
  });


  const onclick = (i) => (e) => {
    setActive(prevState => {
      const newItems = [...prevState];
      newItems[i] = !newItems[i];
      return newItems;
    });
    setEobj({
      index: i,
      event: e
    });
    if (i>=0 && i <= 2) setDisplay(1);
    else if (i>=3 && i<= 5) setDisplay(2);
  }
    
  const onpointerover = (i) => (e) => {
    setHover(prevState => {
      const newItems = [...prevState];
      newItems[i] = true;
      return newItems;
    });
    setEobj({
      index: i,
      event: e
    });
    // if (i>=0 && i <= 2) setDisplay(1);
    // else if (i>=3 && i<= 5) setDisplay(2);
  }
    
  const onpointerout = (i) => (e) => {
    setHover(prevState => {
      const newItems = [...prevState];
      newItems[i] = false;
      return newItems;
    });
    setEobj({
      index: i,
      event: e
    });
    setDisplay(0);
  }


  return (
    <group {...props} dispose={null}>
      <group scale={1.614}>
        <mesh geometry={nodes.Landscape.geometry} material={materials.Green} />
        <mesh geometry={nodes.Landscape_1.geometry} material={materials['Gray 3']} />
        <mesh geometry={nodes.Landscape_2.geometry} material={materials.Blue} />
        <mesh geometry={nodes.Landscape_3.geometry} material={materials['Gray 1']} />
      </group>
      <mesh geometry={nodes.Lake.geometry} material={materials.Blue} scale={[6.34, 7.485, 7.485]} />
      <group position={[-1.193, 0.066, -2.149]} scale={0.059}>
        <mesh geometry={nodes.Cylinder.geometry} material={materials['Light Brown']} />
        <mesh geometry={nodes.Cylinder_1.geometry} material={materials.Black} />
        <mesh geometry={nodes.Cylinder_2.geometry} material={materials['Dark Brown']} />
        <mesh geometry={nodes.Cylinder_3.geometry} material={materials['Gray 3']} />
        <mesh geometry={nodes.Cylinder_4.geometry} material={materials['Red 4']} />
      </group>
      <group position={[-1.483, 0.51, -3.747]} rotation={[0, 1.258, 0]} scale={[0.01, 0.001, 0.013]}>
        <mesh geometry={nodes.Cube085.geometry} material={materials['Light Brown']} />
        <mesh geometry={nodes.Cube085_1.geometry} material={materials.Black} />
        <mesh geometry={nodes.Cube085_2.geometry} material={materials['Gray 3']} />
        <mesh geometry={nodes.Cube085_3.geometry} material={materials['Gray 1']} />
        <mesh geometry={nodes.Cube085_4.geometry} material={materials.Blue} />
        <mesh geometry={nodes.Cube085_5.geometry} material={materials['Red 3']} />
        <mesh geometry={nodes.Cube085_6.geometry} material={materials['Red 1']} />
        <mesh geometry={nodes.Cube085_7.geometry} material={materials['Red 2']} />
        <mesh geometry={nodes.Cube085_8.geometry} material={materials['Red 5']} />
        <mesh geometry={nodes.Cube085_9.geometry} material={materials['Red 4']} />
        <mesh geometry={nodes.Cube085_10.geometry} material={materials['Gray 2']} />
        <mesh geometry={nodes.Cube085_11.geometry} material={materials.Yellow} />
      </group>
      <group position={[0.436, 0.037, 6.41]} rotation={[-0.17, 0.126, 0.04]} scale={0.065}>
        <mesh geometry={nodes.Cylinder037.geometry} material={materials['Forest Green']} />
        <mesh geometry={nodes.Cylinder037_1.geometry} material={materials['Dark Brown']} />
        <mesh geometry={nodes.Cylinder037_2.geometry} material={materials['Green 2']} />
        <mesh geometry={nodes.Cylinder037_3.geometry} material={materials['Forest Green 2']} />
        <mesh geometry={nodes.Cylinder037_4.geometry} material={materials['Light Brown']} />
      </group>
      <mesh ref={grass} geometry={nodes.Plane3996.geometry} material={materials.Grass} position={[-5.485, -0.631, -0.588]} rotation={[1.59, -0.005, -1.283]} scale={[0.507, 0.136, 0.136]} />
      
      <mesh ref={blade0} geometry={nodes.TBlade0.geometry} material={nodes.TBlade0.material} position={[-0.37, 1.963, -5.147]} scale={0.062} 
      onClick={onclick(0)} onPointerOver={onpointerover(0)} onPointerOut={onpointerout(0)}
      />
      <mesh geometry={nodes.TBody0.geometry} material={materials['Material.003']} position={[-0.37, 0.344, -5.195]} scale={0.062} 
      onClick={onclick(0)} onPointerOver={onpointerover(0)} onPointerOut={onpointerout(0)}
      />
      
      <mesh ref={blade1} geometry={nodes.TBlade1.geometry} material={nodes.TBlade1.material} position={[-1.898, 1.643, -1.918]} scale={0.062} 
      onClick={onclick(1)} onPointerOver={onpointerover(1)} onPointerOut={onpointerout(1)}
      />
      <mesh geometry={nodes.TBody1.geometry} material={materials['Material.003']} position={[-1.898, 0.024, -1.966]} scale={0.062}
        onClick={onclick(1)} onPointerOver={onpointerover(1)} onPointerOut={onpointerout(1)}
      />
      
      <mesh ref={blade2} geometry={nodes.TBlade2.geometry} material={nodes.TBlade2.material} position={[0.329, 1.703, -2.825]} scale={0.062} 
      onClick={onclick(2)} onPointerOver={onpointerover(2)} onPointerOut={onpointerout(2)}
      />
      <mesh geometry={nodes.TBody2.geometry} material={materials['Material.003']} position={[0.329, 0.083, -2.874]} scale={0.062}
        onClick={onclick(2)} onPointerOver={onpointerover(2)} onPointerOut={onpointerout(2)}
      />
      
      <mesh geometry={nodes.Solar0.geometry} material={materials['lambert3SG.001']} position={[1.406, 0.081, -1.79]} rotation={[Math.PI, -0.918, Math.PI]} scale={0.001}
        onClick={onclick(3)} onPointerOver={onpointerover(3)} onPointerOut={onpointerout(3)}
      />
      <mesh geometry={nodes.Solar1.geometry} material={materials['lambert3SG.001']} position={[2.108, 0.07, -1.49]} rotation={[Math.PI, -0.918, Math.PI]} scale={0.001}
        onClick={onclick(4)} onPointerOver={onpointerover(4)} onPointerOut={onpointerout(4)}
      />
      <mesh geometry={nodes.Solar2.geometry} material={materials['lambert3SG.001']} position={[2.781, 0.046, -1.167]} rotation={[Math.PI, -0.918, Math.PI]} scale={0.001}
        onClick={onclick(5)} onPointerOver={onpointerover(5)} onPointerOut={onpointerout(5)}
      />
    </group>
  )
}

useGLTF.preload('./models/terrain.glb')
